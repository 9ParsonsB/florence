#!/usr/bin/env python
# -*- coding: utf-8 -*- 

import sys
reload(sys)
sys.setdefaultencoding("utf-8")

from xml.dom import minidom
import cgi
import os.path

scale = 20.0

lang = sys.argv[1]

if os.path.isfile("florence.xml"):
	source = "florence.xml"
elif os.path.isfile("../../data/layouts/florence.xml"):
	source = "../../data/layouts/florence.xml"
else:
	source = "/usr/share/florence/layouts/florence.xml"
	if os.getenv("DATADIR"):
		source = "%s/florence/layouts/florence.xml" % os.getenv("DATADIR")
	elif os.getenv("PREFIX"):
		source = "%s/share/florence/layouts/florence.xml" % os.getenv("PREFIX")

def get_element(node, name):
	if len(node.getElementsByTagName(name)) > 0:
		return node.getElementsByTagName(name)[0].firstChild.data
	else:
		return None

def get_mods(k, x, y, w, h, scale):
	t = ""
	for sym in k.getElementsByTagName("symbol"):
		m = int(sym.getAttribute("mod"))
		ks = sym.getAttribute("sym")
		if ks != "": ks = " " + ks
		style = ''
		if m > 0: style=' style="display: none;"'
		if get_element(sym, 'style'):
			txt = get_element(sym, 'style')
			t += '<use class="symbol mod%d%s" x="%d" y="%d" width="%d" height="%d" xlink:href="style.svg#%s"%s/>' % (m, ks, x, y, w, h, txt, style)
		elif get_element(sym, 'name'):
		#	txt = get_element(sym, 'name')
		#	t += '<text class="symbol mod%d" font-family="Arial" font-size="%d" text-anchor="middle" x="%d" y="%d"%s>%s</text>' % (m, scale*0.9, x + (w/2.0), y + (h/2.0) + (scale/2.0), style, txt)
			t += '<text class="symbol mod%d%s" font-family="Arial" font-size="%d" text-anchor="middle" x="%d" y="%d"%s>%s</text>' % (m, ks, scale*0.9, x + (w/2.0), y + (h/2.0) + (scale/2.0), style, "")
			pass
		else:
			txt = cgi.escape(sym.firstChild.data)
			t += '<text class="symbol mod%d%s" font-family="Arial" font-size="%d" text-anchor="middle" x="%d" y="%d"%s>%s</text>' % (m, ks, scale*0.9, x + (w/2.0), y + (h/2.0) + (scale/2.0), style, txt)
	return t

def get_symbol(code, x, y, w, h, scale):
	xmldoc = minidom.parse(lang)
	keys = xmldoc.getElementsByTagName('key')
	for k in keys:
		if k.getAttribute('code') == code:
			if k.getAttribute('mod') == "":
				mod = "key"
			else:
				mod = "key mod" + k.getAttribute('mod')
			if k.getAttribute('locker') == "yes":
				mod = mod + " locker"
			return (mod, get_mods(k, x, y, w, h, scale))
	return (None, None)

xmldoc = minidom.parse(source)
kbds = [ ( "Main", "mid", xmldoc.getElementsByTagName('keyboard')[0] ) ]
exts = xmldoc.getElementsByTagName('extension')
kbd = xmldoc.getElementsByTagName('keyboard')[0]
w = float(get_element(kbd, 'width'))
h = float(get_element(kbd, 'height'))
for ext in exts:
	kbd = ext.getElementsByTagName('keyboard')[0]
	placement = get_element(ext, 'placement')
	if placement not in ['top','bottom']:
		w += float(get_element(kbd, 'width'))
	if placement not in ['left', 'right']:
		h += float(get_element(kbd, 'height'))
	kbds.append((get_element(ext, 'name'), placement, kbd))
w *= scale
h *= scale

print '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<?xml-stylesheet type="text/css" href="./florence.css"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:flo="http://florence.sourceforge.net" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="%d" height="%d">
   <title>Florence's keyboard</title>
   <desc>Keyboard generated by florence: http://florence.sourceforge.net</desc>''' % (w, h)

top = 0
left = 0
right = 0
bottom = 0
mainw = float(get_element(kbds[0][2], "width"))
mainh = float(get_element(kbds[0][2], "height"))
for kbd in kbds:
	(name, placement, k) = kbd
	w = float(get_element(k, 'width'))
	h = float(get_element(k, 'height'))

	x = sum([ float(get_element(e, 'width')) for e in exts if get_element(e, 'placement') == 'left' ])
	y = sum([ float(get_element(e, 'height')) for e in exts if get_element(e, 'placement') == 'top' ])
	if placement == "top":
		y = top
		top += h
	elif placement == "left":
		x = left
		left += w
	elif placement == "right":
		x += mainw
		x += right
		right += w
	elif placement == "bottom":
		y += mainh
		y += bottom
		bottom += h

	x *= scale
	y *= scale
	w *= scale
	h *= scale

	print
	print '   <g id="%s" width="%d" height="%d" transform="translate(%d, %d)">' % ( name, w, h, x, y )
	keys = k.getElementsByTagName('key')
	for key in keys:
		x = float(get_element(key, "xpos"))
		y = float(get_element(key, "ypos"))
		w = 2
		h = 2
		if get_element(key, "width"): w = float(get_element(key, "width"))
		if get_element(key, "height"): h = float(get_element(key, "height"))

		x = scale * ( x - ( w / 2.0 ) )
		y = scale * ( y - ( h / 2.0 ) )
		w *= scale
		h *= scale

		t = ""
		mod = "key"
		i = get_element(key, "action")
		if i == None:
			i = get_element(key, "code")
			(mod, t) = get_symbol(i, x, y, w, h, scale)
		else:
			t = '<use x="%d" y="%d" width="%d" height="%d" xlink:href="style.svg#t_%s"/>' % (x, y, w, h, i)

		s = "default"
		if get_element(key, "shape"):
			s = get_element(key, "shape")
		s = '<use class="shape" x="%d" y="%d" width="%d" height="%d" xlink:href="style.svg#s_%s"/>' % (x, y, w, h, s)

		start = '<g id="%s" class="%s" x="%d" y="%d" width="%d" height="%d">' % (i, mod, x, y, w, h)
		end = '</g>'
		print '      %s%s%s%s' % (start, s, t, end)

	print '   </g>'

print "</svg>"
